목록안의 원소들을 index번호와 함께 묶어서 반복하는 문장

1. range() 함수를 사용하는 방법
   >>> friends = ['민수', '미영', '수철', '진영', '철수']
   >>> for idx in range(0, len(friends)):
   ...     print(idx, friends[idx])
   ...
   0 민수
   1 미영
   2 수철
   3 진영
   4 철수

   >>> friends = ['민수', '미영', '수철', '진영', '철수']
   >>> for idx in range(0, len(friends)):
   ...     friend = friends[idx]
   ...     print(idx, friend)
   ...
   0 민수
   1 미영
   2 수철
   3 진영
   4 철수

2. enumerate() 함수를 사용하는 방법
   사용법 - enumerate(목록, start)  : 목록의 원소들을 start번호부터 1씩 증가되는 번호와
                                      묶어서 튜플화하고, 전체를 목록화한다.
            enumerate(목록)         : 목록의 원소들을 0(index)번호부터 1씩 증가되는 번호와
                                      묶어서 튜플화하고, 전체를 목록화한다.

   >>> colors = ['red', 'white', 'blue', 'green']
   >>> enumerate(colors)
   [(0, 'red'), (1, 'white'), (2, 'blue'), (3, 'green')]
   >>> enumerate(colors, 1)
   [(1, 'red'), (2, 'white'), (3, 'blue'), (4, 'green')]


구목록의 원소들을 차례대로 처리하여 새목록을 만들어내는 다양한 방법

 1. 일반적인 형태
    >>> 구목록 = [원소1, 원소2, 원소3, ...]
    >>> 새목록 = []
    >>> for 변수 in 구목록:
    ...     새목록.append(코드(변수))

 2. 리스트내포 형태
    >>> 구목록 = [원소1, 원소2, 원소3, ...]
    >>> 새목록 = [코드(변수) for 변수 in 구목록]

 3. map() 함수 사용
    >>> 구목록 = [원소1, 원소2, 원소3, ...]
    >>> 새목록 = map(함수, 구목록)


if문 작성 방법

  1. 일반적인 형태
     >>> if 조건:
     ...     참_코드
     ... else:
     ...     거짓_코드

  2. 인라인 형태
     >>> if 조건: 참_코드
     ... else:    거짓_코드

  3. 조건부 표현 형태
     >>> 참_코드 if 조건 else 거짓_코드


=============================================================================================
while문 - for문과 동일한 반복문의 일종으로 주로 횟수를 알 수 없는 상황에서 조건에 따른
          반복시에 사용된다.
          while 조건이 만족하는 동안 들여쓰기된 블럭이 반복되고, 조건이 만족하지 않으면
          반복을 종료하고 다음 코드로 진행한다.

 while문의 작성 규칙
  1. while문이 시작전 반복제어변수를 반드시 초기화해야한다.
  2. while문은 반복되는 동안 반복제어변수는 반드시 갱신되어야한다.
  3. while문이 종료될 수 있는 조건식을 갖어야한다.

 for문의 특징
  1. for문이 시작전 반복제어변수를 초기화할 필요가 없다.
     - 목록안의 첫 원소가 자동으로 초기화한다.
  2. for문은 반복되는 동안 반복제어변수를 갱신할 필요가 없다.
     - 반복되는 동안 목록의 다음 원소로 자동으로 갱신된다.
  3. for문이 종료될 수 있는 조건식을 갖을 필요가 없다.
     - 목록의 원소가 모두 소진되면 자동으로 종료된다.


프로그램 4

코드1
while 조건:
    코드2
    코드3
    코드4
코드5

진행: 코드1 -> 조건(참)   -> 코드2 -> 코드3 -> 코드4
               조건(참)   -> 코드2 -> 코드3 -> 코드4
               조건(참)   -> 코드2 -> 코드3 -> 코드4
               ...
               조건(참)   -> 코드2 -> 코드3 -> 코드4
               조건(거짓)                            -> 코드5 -> 종료

