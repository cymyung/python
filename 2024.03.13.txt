프로그램1

코드1
if 조건(산술,관계,논리):
     코드2
     코드3
코드4

진행: 코드1 -> 조건(참)   -> 코드2 -> 코드3 -> 코드4 -> 종료
      코드1 -> 조건(거짓)                   -> 코드4 -> 종료

 ※ if 조건: 아래(들여쓰기)의 정의된 코드들을 조건이 참(True)인
    경우에만 실행되고, 거짓(False)인 경우에는 통과된다.


프로그램2

코드1
if 조건:		┐
     코드2		├ 조건이 참(True)인 경우에만 실행
     코드3		┘
else:			┐
     코드4		├ 조건이 거짓(False)인 경우에만 실행
     코드5		┘
코드6

진행: 코드1 -> 조건(참)   -> 코드2 -> 코드3                   -> 코드6 -> 종료
      코드1 -> 조건(거짓)                   -> 코드4 -> 코드5 -> 코드6 -> 종료

  ※ if, else로 구성된 조건문 if 조건식이 참인 경우 if 아래(들여쓰기)의 블럭이 실행되고,
     조건이 거짓인 경우 else 아래(들여쓰기)의 블럭이 실행된다.
     if, else로 구성된 조건문 반드시 if 블럭 또는 else 블럭 중 단 1개의 블럭만을 실행된다.


프로그램3

코드1
if 조건1:
     코드2
elif 조건2:
     코드3
elif 조건3:
     코드4
else:		<- if, elif의 조건식들이 모두 거짓(False)인 경우에 실행되는 블럭
     코드5

진행: 코드1 -> 조건1(참)   -> 코드2                                                 -> 종료
      코드1 -> 조건1(거짓)          -> 조건2(참)   -> 코드3                         -> 종료
      코드1 -> 조건1(거짓)          -> 조건2(거짓)          -> 조건3(참)   -> 코드4 -> 종료
      코드1 -> 조건1(거짓)          -> 조건2(거짓)          -> 조건3(거짓) -> 코드5 -> 종료

진행: 코드1 -> 조건1(참)                                 -> 코드2 -> 종료
      코드1 -> 조건1(거짓) -> 조건2(참)                  -> 코드3 -> 종료
      코드1 -> 조건1(거짓) -> 조건2(거짓) -> 조건3(참)   -> 코드4 -> 종료
      코드1 -> 조건1(거짓) -> 조건2(거짓) -> 조건3(거짓) -> 코드5 -> 종료

  ※ if, elif, else 로 구성된 조건문은 여러 블럭들중 단 1개의 블럭을 실행하고,
     그 외의 나머지 모든 블럭은 모두 무시된다.



프로그램4-1			프로그램4-2

if 조건1:		->	if 조건1 or 조건2:
     코드1			     코드1
elif 조건2:			elif 조건3 or 조건4:
     코드1			     코드2
elif 조건3:
     코드2
elif 조건4:
     코드2

 ※ 서로 다른 조건을 비교하지만, 실행될 코드가 동일하다면 조건1 or 조건2 으로
    1개의 조건식으로 결합할 수 있다.







