반복문 - for문, while문

  - for문   : 정해진 횟수만큼만 반복하고 종료
  - while문 : 주어진 조건이 만족하는 동안 반복하고,
              조건이 만족하지 않으면 종료


 변수 in 목록(튜플)      - 목록(튜플)안에 변수와 동일한 원소가 있는가? True/False


 for 변수 in 목록(튜플): - 목록(튜플)안에 원소들을 차례대로 변수에 대입하여 아래의
                           들여쓰기된 코드블럭을 반복적으로 실행하고, 목록의 원소가
                           모두 소진되면 반복을 종료하고 다음으로 진행해라.

프로그램1

코드1
for x in [10, 20, 30, 40]:		반복횟수: 목록의 원소수 - 4회
    코드2(x)				반복단위: 들여쓰기된 블럭(코드들)
    코드3(x)				          - 코드2, 코드3
코드4					(코드2, 코드3) x 4회

진행: 코드1 -> x = 10 -> 코드2(10) -> 코드3(10)
               x = 20 -> 코드2(20) -> 코드3(20)
               x = 30 -> 코드2(30) -> 코드3(30)
               x = 40 -> 코드2(40) -> 코드3(40) -> 코드4 -> 종료


프로그램2

코드1
for x in [1, 2, 3, 4]:
    코드2(x)
    코드3(x)
    코드4(x)
    break		<- 반복 중 break 문장을 만나면, 반복문을 완전히
코드5			   종료하고 다음 코드로 진행한다.

진행: 코드1 -> x = 1 -> 코드2(1) -> 코드3(1) -> 코드4(1) -> break -> 코드5 -> 종료


프로그램2-1

코드1
for x in [1, 2, 'a', 4]:
    코드2(x)
    코드3(x)
    if 조건(숫자x):
        break		<- 반복 중 break 문장을 만나면, 반복문을 완전히
코드4			   종료하고 다음 코드로 진행한다.	

진행: 코드1 -> x =  1  -> 코드2(1) -> 코드3(1) -> 조건(거짓)
               x =  2  -> 코드2(2) -> 코드3(2) -> 조건(거짓)
               x = 'a' -> 코드2(a) -> 코드3(a) -> 조건(참)   -> break -> 코드4 -> 종료


프로그램3

코드1
for x in [1, 2, 3, 4]:
    코드2(x)
    continue		<- 이번 반복에서 continue 문장을 만나면, 이번 반복을 여기서
    코드3(x)		   끝내고, 다음 반복으로 빠르게 넘어간다.
코드4

진행: 코드1 -> x = 1 -> 코드2(1) -> continue
               x = 2 -> 코드2(2) -> continue
               x = 3 -> 코드2(3) -> continue
               x = 4 -> 코드2(4) -> continue            -> 코드4 -> 종료


프로그램3-1

코드1
for x in [1, 2, 3, 4]:
    코드2(x)
    if 조건(짝수):
        continue	<- 이번 반복에서 continue 문장을 만나면, 이번 반복을 여기서
    코드3(x)		   끝내고, 다음 반복으로 빠르게 넘어간다.
코드4

진행: 코드1 -> x = 1 -> 코드2(1) -> 조건(거짓)             -> 코드3(1)
               x = 2 -> 코드2(2) -> 조건(참)   -> continue
               x = 3 -> 코드2(3) -> 조건(거짓)             -> 코드3(3)
               x = 4 -> 코드2(4) -> 조건(참)   -> continue             -> 코드4 -> 종료

 ※ break, continue 문장은 항상 실행되는 방식보다는 조건(IF)문을 사용하여
    경우에 따라서 실행되거나 되지않는 방식으로 작성해야한다.


range() 함수는 일정하게 증가되는 정수 목록을 생성하는 함수

 사용법: range(start, end, step)  : start이상부터 end미만 사이의 step(간격)으로 증가되는 목록
         range(start, end)        : start이상부터 end미만 사이의 기본(1)씩 증가되는 목록
         range(end)               : 기본(0)이상부터 end미만 사이의 기본(1)씩 증가되는 목록

   예) range(3, 20, 2)	: 3이상부터 20미만 사이의 2씩 증가되는 목록
			  -> [3, 5, 7, 9, 11, 13, 15, 17, 19]
       range(1, 7)	: 1이상부터 7미만 사이의 기본(1)씩 증가되는 목록
			  -> [1, 2, 3, 4, 5, 6]
       range(5)		: 기본(0)이상부터 5미만 사이의 기본(1)씩 증가되는 목록
			  -> [0, 1, 2, 3, 4]
